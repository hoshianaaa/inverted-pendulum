//倒立振子ロボット



#include <ode/ode.h>                            // ODE用ヘッダーファイル
#include <drawstuff/drawstuff.h>                // 描画用ヘッダーファイル

#ifdef dDOUBLE
#define dsDrawSphere dsDrawSphereD
#define dsDrawCylinder dsDrawCylinderD
#define dsDrawBox dsDrawBoxD
#endif

double p = 500;


static dWorldID world;                          //動力学計算用ワールド
static dSpaceID space;                          //衝突検出用スペース
static dGeomID  ground;
static dJointID joint[2];
static dJointGroupID contactgroup;              //コンタクトグループ
static int flag = 0;                            //
dsFunctions fn;                                 //


const dReal   WH_R = 0.1;                       //車輪の半径
const dReal   WH_W = 0.05;                      //車輪の幅
const dReal   WH_M   = 1.0;                     //車輪の質量

const dReal BASE_M = 9.4;                             //台車の質量
const dReal BASE_S[3] = {0.2,0.3,0.6};                //台車のサイズ
const dReal START_X = 0, START_Y = 0, START_Z = BASE_S[2]/2 + WH_R ;  //初期位置

const dReal ST_R = 0.05;
const dReal ST_M = 0.1;

dReal BASE_THETA=0.0; // 本体の傾き
dReal DT=0.01;


dReal v_r = 0.0, v_l = 0.0;


typedef struct {                                // MyObject 構造体
  dBodyID body;                                 // ボディ（剛体）のID番号（動力学計算用）
  dGeomID geom;                                 // ジオメトリのID番号（衝突検出用計算）
} MyObject;

MyObject wheel[2],base,stoon;


// コールバック関数

static void nearCallback (void *data, dGeomID o1, dGeomID o2)
{
    int i,n;

    dBodyID b1 = dGeomGetBody(o1);
    dBodyID b2 = dGeomGetBody(o2);
    if (b1 && b2 && dAreConnectedExcluding(b1,b2,dJointTypeContact)) return;

    static const int N = 10;
    dContact contact[N];
    n = dCollide(o1,o2,N,&contact[0].geom,sizeof(dContact));
    if (n > 0) {
        for (i=0; i < n; i++) {
            contact[i].surface.mode = dContactSlip1 | dContactSlip2 |
            dContactSoftERP | dContactSoftCFM | dContactApprox1;
            contact[i].surface.mu = dInfinity;
            contact[i].surface.slip1 = 0.1;
            contact[i].surface.slip2 = 0.1;
            contact[i].surface.soft_erp = 0.8;
            contact[i].surface.soft_cfm = 1e-5;
            dJointID c = dJointCreateContact(world,contactgroup,&contact[i]);
            dJointAttach(c,b1,b2);
        }
    }
}

static void control(){

    double fMax = 100;
    dJointSetHingeParam(joint[0], dParamVel, v_l);
    dJointSetHingeParam(joint[0], dParamFMax, fMax);
    dJointSetHingeParam(joint[1], dParamVel , v_r);
    dJointSetHingeParam(joint[1], dParamFMax, fMax);

}

static void jyroSensor(dReal *xv, dReal *yv, dReal *zv)
{
    const dReal *av;
    dReal result[3];
    av=dBodyGetAngularVel(base.body);
    dBodyVectorFromWorld(base.body, av[0], av[1], av[2], result);
    *xv=result[0];
    *yv=result[1];
    *zv=result[2];
}

// シミュレーションループ
static void simLoop (int pause)
{



  dReal vx, vy, vz;
  jyroSensor(&vx, &vy, &vz);
  BASE_THETA=BASE_THETA+vy*DT;




  printf("%lf",BASE_THETA);
  printf("   v: %lf\n",v_r);
  control();
  const dReal *pos,*R;

  v_r = - p * BASE_THETA;
  v_l = v_r;

  flag = 0;
  dSpaceCollide(space,0,&nearCallback);     // 衝突検出関数
  dWorldStep(world,DT);
  dJointGroupEmpty(contactgroup);           // ジョイントグループを空にする


  for(int i = 0; i < 2 ; i++){
    dsSetColor(1.0, 0.0, 0.0);
    dsDrawCylinder(dBodyGetPosition(wheel[i].body),dBodyGetRotation(wheel[i].body),WH_W,WH_R);
  }
    dsSetColor(0.0, 1.0, 0.0);
    dsDrawBox(dBodyGetPosition(base.body),dBodyGetRotation(base.body),BASE_S);

  dsSetColor(1.0, 0.0, 1.0);
  dsDrawSphere(dBodyGetPosition(stoon.body),dBodyGetRotation(stoon.body),ST_R);

}

void start()                                       /*** 前処理 ***/
{
  static float xyz[3] = {0.0,1.0,0.4};            // 視点の位置
  static float hpr[3] = {-90.0,0.0,0.0};             // 視点の方向
  dsSetViewpoint (xyz,hpr);
}

void  prepDrawStuff() {                             // 描画関数の設定
  fn.version = DS_VERSION;
  fn.start   = &start;
  fn.step    = &simLoop;
  fn.command = NULL;
  fn.stop    = NULL;
  fn.path_to_textures = "../../drawstuff/textures";
}



int main (int argc, char *argv[])
{

  dMass mass;
  dMatrix3 R;
  dReal angle = M_PI/2;

  prepDrawStuff();

  dInitODE();
  world = dWorldCreate();
  space = dHashSpaceCreate(0);
  contactgroup = dJointGroupCreate(0);

    dWorldSetGravity(world,0,0,-0.1);

  // Create a ground
  ground = dCreatePlane(space,0,0,1,0);

  // 車体
  base.body = dBodyCreate(world);                                       // ワールドにボディを生成
  dMassSetZero(&mass);                                                  // 質量パラメータの初期化
  dMassSetBoxTotal(&mass, BASE_M, BASE_S[0], BASE_S[1], BASE_S[2]);     // 質量パラメータの計算
  dBodySetMass(base.body, &mass);                                       // 質量パラメータの設定
  base.geom = dCreateBox(space, BASE_S[0], BASE_S[1], BASE_S[2]);       // ジオメトリの生成
  dGeomSetBody(base.geom, base.body);                                   // ジオメトリとボディの関連付け
  dBodySetPosition(base.body, START_X, START_Y, START_Z);               //　ボディの初期位置の設定

  // 車輪
  dRFromAxisAndAngle(R,1,0,0,angle);                                    // 回転行列の生成
  for (int i = 0; i < 2; i++) {
      wheel[i].body = dBodyCreate(world);                               // ボディの生成
      dMassSetZero(&mass);                                              // 質量パラメータの初期化
      dMassSetCylinderTotal(&mass, WH_M, 1, WH_R, WH_W);                // 質量パラメータの計算
      dBodySetMass(wheel[i].body, &mass);                               // 質量パラメータの設定
      wheel[i].geom = dCreateCylinder(space, WH_R, WH_W);               // ジオメトリの生成
      dGeomSetBody(wheel[i].geom, wheel[i].body);                       // ボディとジオメトリの関連付け
      dBodySetRotation(wheel[i].body, R);                               // ボディの初期姿勢の設定
  }

  dReal w0x = START_X;
  dReal w0y = (BASE_S[1] + WH_W) / 2 + START_Y;                         // wheel[0]のy座標（＋y方向の車輪）
  dReal w0z = WH_R;
  dReal w1x = START_X;
  dReal w1y = -(BASE_S[1] + WH_W) / 2 + START_Y;                        // wheel[1]のy座標(-y方向の車輪）
  dReal w1z = WH_R;                                                     // wheel[1]のｚ座標

  dBodySetPosition(wheel[0].body, w0x, w0y, w0z);                       // wheel[0]の座標の設定
  dBodySetPosition(wheel[1].body, w1x, w1y, w1z);                       // wheel[1]の座標の設定

    //stoon
  stoon.body = dBodyCreate(world);
  dMassSetZero(&mass);
  dMassSetSphereTotal(&mass,ST_M,ST_R);
  dBodySetMass(stoon.body,&mass);
  dBodySetPosition(stoon.body, 0.1, 0.0, 1);
  stoon.geom = dCreateSphere(space, ST_R);
  dGeomSetBody(stoon.geom, stoon.body);


  //ジョイント
  joint[0] = dJointCreateHinge(world, 0);
  dJointAttach(joint[0], base.body, wheel[0].body);
  joint[1] = dJointCreateHinge(world, 0);
  dJointAttach(joint[1], base.body, wheel[1].body);

  dJointSetHingeAxis(joint[0], 0, 1, 0);
  dJointSetHingeAxis(joint[1], 0, 1, 0);

  dJointSetHingeAnchor(joint[0],   w0x, w0y, w0z);
  dJointSetHingeAnchor(joint[1],   w1x, w1y, w1z);


  dsSimulationLoop (argc,argv,600,480,&fn);

  dWorldDestroy (world);
  dCloseODE();

  return 0;
}
